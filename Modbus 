#include <Adafruit_MAX31865.h>
#include <SimpleModbusSlave.h> // Include Modbus library

// MAX31865 SPI pins
#define MAX31865_MISO 19
#define MAX31865_MOSI 23
#define MAX31865_CLK 18
#define MAX31865_CS 5

// Create an instance of the MAX31865 with custom SPI pins
Adafruit_MAX31865 thermo = Adafruit_MAX31865(MAX31865_CS, MAX31865_MOSI, MAX31865_MISO, MAX31865_CLK);

// Define the nominal resistance of the PT100 at 0°C
#define R0 100.0  

// Callendar-Van Dusen equation coefficients
#define A 3.9083e-3
#define B -5.775e-7
#define C -4.183e-12 // Only used for temperatures below 0°C

// Modbus settings
#define SLAVE_ID 1  // Modbus slave ID
#define BAUD_RATE 9600

// Modbus register array
enum {
  TEMPERATURE_REGISTER, // Register 0: Temperature
  TOTAL_REGS_SIZE       // Total number of registers
};

unsigned int holdingRegs[TOTAL_REGS_SIZE]; // Array for Modbus holding registers

void setup() {
  // Initialize Serial communication
  Serial.begin(9600);

  // Initialize MAX31865 in 3-wire mode
  if (!thermo.begin(MAX31865_3WIRE)) {
    Serial.println("Failed to initialize MAX31865. Check your connections!");
    while (1); // Stop execution if initialization fails
  }

  // Initialize Modbus communication
  modbus_configure(&Serial, BAUD_RATE, SERIAL_8E1, SLAVE_ID, TOTAL_REGS_SIZE, holdingRegs);
}

void loop() {
  // Read RTD resistance
  uint16_t rtd = thermo.readRTD();
  float Rt = (rtd / 32768.0) * 430.0;  // Convert RTD raw data to resistance

  // Print resistance value
  Serial.print("RTD Resistance: ");
  Serial.print(Rt, 3);
  Serial.println(" ohms");

  // Calculate temperature using the Callendar-Van Dusen equation
  float temperature = calculateTemperature(Rt);

  // Print temperature value
  Serial.print("Calculated Temperature: ");
  Serial.print(temperature, 2);
  Serial.println(" °C");

  // Check for faults
  checkFaults();

  // Write the temperature to the Modbus register
  holdingRegs[TEMPERATURE_REGISTER] = (int16_t)(temperature * 10); // Store as integer with 1 decimal precision

  // Run the Modbus communication loop
  modbus_update();

  delay(1000); // Delay for 1 second
}

// Function to calculate temperature from resistance
float calculateTemperature(float Rt) {
  float t;

  if (Rt >= R0) {
    // For temperatures above 0°C
    t = (-A + sqrt(A * A - 4 * B * (1 - Rt / R0))) / (2 * B);
  } else {
    // For temperatures below 0°C (iterative solution)
    float tolerance = 0.001;  // Convergence tolerance
    int maxIterations = 100;  
    int iteration = 0;
    float diff;
    t = Rt; 

    do {
      float fValue = R0 * (1 + A * t + B * t * t + C * (t - 100) * t * t * t) - Rt;
      float fDerivative = R0 * (A + 2 * B * t + 3 * C * (t - 100) * t * t + C * t * t * t);
      float nextT = t - fValue / fDerivative;
      diff = abs(nextT - t);
      t = nextT;
      iteration++;
    } while (diff > tolerance && iteration < maxIterations);

    if (iteration == maxIterations) {
      Serial.println("Max iterations reached. Convergence not achieved.");
    }
  }

  return t;
}

// Function to check and print faults from the MAX31865
void checkFaults() {
  uint8_t fault = thermo.readFault();
  if (fault) {
    Serial.print("Fault 0x");
    Serial.println(fault, HEX);

    if (fault & MAX31865_FAULT_HIGHTHRESH) {
      Serial.println("RTD High Threshold");
    }
    if (fault & MAX31865_FAULT_LOWTHRESH) {
      Serial.println("RTD Low Threshold");
    }
    if (fault & MAX31865_FAULT_REFINLOW) {
      Serial.println("REFIN- > 0.85 x Bias");
    }
    if (fault & MAX31865_FAULT_REFINHIGH) {
      Serial.println("REFIN- < 0.85 x Bias - FORCE- open");
    }
    if (fault & MAX31865_FAULT_RTDINLOW) {
      Serial.println("RTDIN- < 0.85 x Bias - FORCE- open");
    }
    if (fault & MAX31865_FAULT_OVUV) {
      Serial.println("Under/Over voltage");
    }

    // Clear fault status
    thermo.clearFault();
  }
}